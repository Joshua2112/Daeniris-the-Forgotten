/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package byui.CIT260.DaenirisTheForgotten.Frames;

import byui.CIT260.DaenirisTheForgotten.Control.Constants;
import byui.CIT260.DaenirisTheForgotten.Control.ShopControl;
import byui.CIT260.DaenirisTheForgotten.Exception.illegalActionException;
import byui.CIT260.DaenirisTheForgotten.Model.Actor;
import byui.CIT260.DaenirisTheForgotten.Model.Game;
import byui.CIT260.DaenirisTheForgotten.Model.Gear;
import byui.CIT260.DaenirisTheForgotten.Model.Inventory;
import byui.CIT260.DaenirisTheForgotten.Model.PlayerCharacter;
import byui.CIT260.DaenirisTheForgotten.Model.Spells;
import daeniristheforgotten.DaenirisTheForgotten;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.WindowConstants;

/**
 *
 * @author Joshua
 */
public class ShopFrame extends javax.swing.JFrame {

    /**
     * Creates new form ShopFrame
     */
    public ShopFrame() {
        initComponents();
        Game game = DaenirisTheForgotten.getCurrentGame();
    AdventureMenuFrame adventureMenuFrame = null;
    Gear[] armors = game.getArmors();
    Gear[] helms = game.getHelms();
    Gear[] weapons = game.getWeapons();
    Gear[] secondaries = game.getSecondaries();
    Spells[] inventory = game.getInventory();
    Actor[][] actors = game.getActor();
    PlayerCharacter player = ((PlayerCharacter) actors[0][0]);
    
    this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        
        int rowCount = this.shopTable.getRowCount();
        int columnCount = this.shopTable.getColumnCount();
        
        for (int i = 0; i < Constants.GEAR_LIST_COUNT; i++){
                this.shopTable.getModel().setValueAt(inventory[i].getSpellName(), i, 0);
                this.shopTable.getModel().setValueAt(weapons[i].getName(), i, 1);
                this.shopTable.getModel().setValueAt(armors[i].getName(), i, 2);
                this.shopTable.getModel().setValueAt(helms[i].getName(), i, 3);
                this.shopTable.getModel().setValueAt(secondaries[i].getName(), i, 4);
    }
        this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        shopTable = new javax.swing.JTable();
        buyButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        sellButton = new javax.swing.JButton();
        itemName = new javax.swing.JLabel();
        itemDescription = new javax.swing.JLabel();
        itemCost = new javax.swing.JLabel();
        itemDefense = new javax.swing.JLabel();
        itemAttack = new javax.swing.JLabel();
        itemQuantityOwned = new javax.swing.JLabel();
        itemMAttack = new javax.swing.JLabel();
        itemMDefense = new javax.swing.JLabel();
        shopPlayerGold = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));

        shopTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Items", "Weapons", "Armor", "Helmets", "Left Hand Stuff"
            }
        ));
        shopTable.setColumnSelectionAllowed(true);
        shopTable.setPreferredSize(new java.awt.Dimension(300, 350));
        shopTable.setRowHeight(50);
        shopTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shopTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(shopTable);
        shopTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        sellButton.setText("Sell");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        itemName.setText("Item Name");

        itemDescription.setText("Item Description");

        itemCost.setText("Item Cost");

        itemDefense.setText("Item Defense");

        itemAttack.setText("Item Attack");

        itemQuantityOwned.setText("Quantity Owned");

        itemMAttack.setText("Magic Attack");

        itemMDefense.setText("Magic Defense");

        shopPlayerGold.setText("Your Current Gold");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 798, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buyButton)
                            .addComponent(sellButton)
                            .addComponent(exitButton))
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemName)
                            .addComponent(itemDescription)
                            .addComponent(itemCost))
                        .addGap(133, 133, 133)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(itemQuantityOwned)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemAttack)
                                    .addComponent(itemDefense))
                                .addGap(127, 127, 127)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(itemMAttack)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(itemMDefense)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(shopPlayerGold)))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyButton)
                    .addComponent(itemName)
                    .addComponent(itemAttack)
                    .addComponent(itemMAttack))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sellButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemDescription)
                        .addComponent(itemDefense)
                        .addComponent(itemMDefense)
                        .addComponent(shopPlayerGold)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(exitButton)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(itemCost)
                        .addComponent(itemQuantityOwned)))
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shopTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shopTableMouseClicked
        Game game = DaenirisTheForgotten.getCurrentGame();
        Gear[] armors = game.getArmors();
        Gear[] helms = game.getHelms();
        Gear[] weapons = game.getWeapons();
        Gear[] secondaries = game.getSecondaries();
        Spells[] inventory = game.getInventory();
        
        int column = this.shopTable.getSelectedColumn();
        int row = this.shopTable.getSelectedRow();
        Gear gear = null;
        Spells item = null;
        
        if(column == 1){
            gear = weapons[row];
            this.itemName.setText(gear.getName());
            this.itemDescription.setText(gear.getDescription());
            this.itemAttack.setText("Attack: " + gear.getAttackBonus());
            this.itemDefense.setText("Defense: " + gear.getDefenseBonus());
            this.itemMAttack.setText("Magic Attack: " + gear.getMagicAttackBonus());
            this.itemMDefense.setText("Magic Defense: " + gear.getMagicDefenseBonus());
            this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
            this.itemCost.setText("Cost: " + gear.getCost());
        }
        else if(column == 2){
            gear = armors[row];
            this.itemName.setText(gear.getName());
            this.itemDescription.setText(gear.getDescription());
            this.itemAttack.setText("Attack: " + gear.getAttackBonus());
            this.itemDefense.setText("Defense: " + gear.getDefenseBonus());
            this.itemMAttack.setText("Magic Attack: " + gear.getMagicAttackBonus());
            this.itemMDefense.setText("Magic Defense: " + gear.getMagicDefenseBonus());
            this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
            this.itemCost.setText("Cost: " + gear.getCost());
        }
        else if(column == 3){
            gear = helms[row];
            this.itemName.setText(gear.getName());
            this.itemDescription.setText(gear.getDescription());
            this.itemAttack.setText("Attack: " + gear.getAttackBonus());
            this.itemDefense.setText("Defense: " + gear.getDefenseBonus());
            this.itemMAttack.setText("Magic Attack: " + gear.getMagicAttackBonus());
            this.itemMDefense.setText("Magic Defense: " + gear.getMagicDefenseBonus());
            this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
            this.itemCost.setText("Cost: " + gear.getCost());
        }
        else if(column == 4){
            gear = secondaries[row];
            this.itemName.setText(gear.getName());
            this.itemDescription.setText(gear.getDescription());
            this.itemAttack.setText("Attack: " + gear.getAttackBonus());
            this.itemDefense.setText("Defense: " + gear.getDefenseBonus());
            this.itemMAttack.setText("Magic Attack: " + gear.getMagicAttackBonus());
            this.itemMDefense.setText("Magic Defense: " + gear.getMagicDefenseBonus());
            this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
            this.itemCost.setText("Cost: " + gear.getCost());
        }
        else if(column == 0){
            item = inventory[row];
            this.itemName.setText(item.getSpellName());
            this.itemDescription.setText(item.getDescription());
            this.itemAttack.setText("Not Applicable");
            this.itemDefense.setText("Not Applicable");
            this.itemMAttack.setText("Not Applicable");
            this.itemMDefense.setText("Not Applicable");
            this.itemQuantityOwned.setText("Quantity Owned: " + item.getQuantity());
            this.itemCost.setText("Cost: " + item.getCost());
        }
        
    }//GEN-LAST:event_shopTableMouseClicked

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed
        Game game = DaenirisTheForgotten.getCurrentGame();
        Gear[] armors = game.getArmors();
        Gear[] helms = game.getHelms();
        Gear[] weapons = game.getWeapons();
        Gear[] secondaries = game.getSecondaries();
        Spells[] inventory = game.getInventory();
        Actor[][] actors = game.getActor();
        PlayerCharacter player = ((PlayerCharacter) actors[0][0]);
        int column = this.shopTable.getSelectedColumn();
        int row = this.shopTable.getSelectedRow();
        Gear gear = null;
        Spells item = null;
        String buyMessage = " ";
        
        if(column == 0) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.buyItem(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                item = inventory[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + item.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
                
        }
        if(column == 1) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.buyWeapon(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = weapons[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
        if(column == 2) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.buyArmor(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = armors[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
        if(column == 3) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.buyHelmet(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = helms[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
        if(column == 4) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.buySecondary(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = secondaries[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
    }//GEN-LAST:event_buyButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        Game game = DaenirisTheForgotten.getCurrentGame();
        Gear[] armors = game.getArmors();
        Gear[] helms = game.getHelms();
        Gear[] weapons = game.getWeapons();
        Gear[] secondaries = game.getSecondaries();
        Spells[] inventory = game.getInventory();
        Actor[][] actors = game.getActor();
        PlayerCharacter player = ((PlayerCharacter) actors[0][0]);
        int column = this.shopTable.getSelectedColumn();
        int row = this.shopTable.getSelectedRow();
        Gear gear = null;
        Spells item = null;
        String buyMessage = " ";
        
        if(column == 0) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.sellItem(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                item = inventory[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + item.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
                
        }
        if(column == 1) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.sellWeapon(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = weapons[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
        if(column == 2) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.sellArmor(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = armors[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
        if(column == 3) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.sellHelmet(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = helms[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
        if(column == 4) {
            ShopControl shop = new ShopControl();
                buyMessage = shop.sellSecondary(row);
                ShopResults bought = new ShopResults(buyMessage);
                bought.setVisible(true);
                gear = secondaries[row];
                this.itemQuantityOwned.setText("Quantity Owned: " + gear.getQuantity());
                this.shopPlayerGold.setText("Gold : " + player.getPlayerGold());
        }
    }//GEN-LAST:event_sellButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShopFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShopFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buyButton;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel itemAttack;
    private javax.swing.JLabel itemCost;
    private javax.swing.JLabel itemDefense;
    private javax.swing.JLabel itemDescription;
    private javax.swing.JLabel itemMAttack;
    private javax.swing.JLabel itemMDefense;
    private javax.swing.JLabel itemName;
    private javax.swing.JLabel itemQuantityOwned;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton sellButton;
    private javax.swing.JLabel shopPlayerGold;
    private javax.swing.JTable shopTable;
    // End of variables declaration//GEN-END:variables
}
