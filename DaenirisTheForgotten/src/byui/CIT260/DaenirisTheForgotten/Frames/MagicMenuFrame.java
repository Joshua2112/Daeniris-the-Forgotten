/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package byui.CIT260.DaenirisTheForgotten.Frames;

import byui.CIT260.DaenirisTheForgotten.Control.GameControl;
import byui.CIT260.DaenirisTheForgotten.Control.SpellControl;
import byui.CIT260.DaenirisTheForgotten.Exception.illegalActionException;
import byui.CIT260.DaenirisTheForgotten.Exception.stringNotFoundException;
import byui.CIT260.DaenirisTheForgotten.Model.Actor;
import byui.CIT260.DaenirisTheForgotten.Model.ArrayLocation;
import byui.CIT260.DaenirisTheForgotten.Model.Game;
import byui.CIT260.DaenirisTheForgotten.Model.PlayerCharacter;
import byui.CIT260.DaenirisTheForgotten.Model.Spells;
import byui.CIT260.DaenirisTheForgotten.Model.World;
import byui.CIT260.DaenirisTheForgotten.View.PlayerCharacterInfoView;
import daeniristheforgotten.DaenirisTheForgotten;

/**
 *
 * @author Nathan
 */
public class MagicMenuFrame extends javax.swing.JFrame {
    Game game = DaenirisTheForgotten.getCurrentGame();
    Spells[][] spells = game.getSpells();
    AdventureMenuFrame adventureMenuFrame = null;
    
    public MagicMenuFrame(AdventureMenuFrame adventureMenuFrame){
        this();
        this.adventureMenuFrame = adventureMenuFrame;
    }
    
    public MagicMenuFrame() {
        
        
        initComponents();
        
        int rowCount = this.magicTable.getRowCount();
        int columnCount = this.magicTable.getColumnCount();
        
        for (int i = 0; i < rowCount; i++){
            for (int j = 0; j < columnCount; j++){
                this.magicTable.getModel().setValueAt(spells[j][i].getSpellName(), i, j);
            }               
        }
        populatePlayerStats();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        magicTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        castSpell = new javax.swing.JButton();
        exitMenu = new javax.swing.JButton();
        spellDisplayPanel = new javax.swing.JPanel();
        spellDescription = new javax.swing.JLabel();
        spellName = new javax.swing.JLabel();
        spellEffect = new javax.swing.JLabel();
        manaCost = new javax.swing.JLabel();
        healthPoints = new javax.swing.JLabel();
        manaPoints = new javax.swing.JLabel();
        canvas1 = new java.awt.Canvas();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        magicTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "White Magic", "Black Magic"
            }
        ));
        magicTable.setColumnSelectionAllowed(true);
        magicTable.setRowHeight(50);
        magicTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                magicTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(magicTable);
        magicTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setText("Magic Menu");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        castSpell.setText("Cast");
        castSpell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                castSpellActionPerformed(evt);
            }
        });

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(castSpell, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(castSpell, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(exitMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spellDisplayPanel.setBackground(new java.awt.Color(204, 204, 204));

        spellDescription.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        spellDescription.setText(" ");

        spellName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        spellName.setText(" ");

        spellEffect.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        spellEffect.setText(" ");

        manaCost.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manaCost.setText(" ");

        healthPoints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        healthPoints.setText("health");

        manaPoints.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manaPoints.setText("mana");

        javax.swing.GroupLayout spellDisplayPanelLayout = new javax.swing.GroupLayout(spellDisplayPanel);
        spellDisplayPanel.setLayout(spellDisplayPanelLayout);
        spellDisplayPanelLayout.setHorizontalGroup(
            spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spellDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spellDisplayPanelLayout.createSequentialGroup()
                        .addComponent(manaCost, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(spellEffect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(spellDisplayPanelLayout.createSequentialGroup()
                        .addComponent(spellName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spellDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(healthPoints, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(manaPoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        spellDisplayPanelLayout.setVerticalGroup(
            spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spellDisplayPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(spellDisplayPanelLayout.createSequentialGroup()
                        .addGroup(spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spellName)
                            .addComponent(spellDescription))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(spellDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spellEffect)
                            .addComponent(manaCost))
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, spellDisplayPanelLayout.createSequentialGroup()
                        .addComponent(healthPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manaPoints, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(jLabel1)
                        .addGap(121, 121, 121)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spellDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(canvas1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(37, 37, 37)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spellDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void castSpellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_castSpellActionPerformed
        
        
        Spells spell;        
        int row = this.magicTable.getSelectedRow();
        int column = this.magicTable.getSelectedColumn();
        String selection = (String) this.magicTable.getValueAt(row, column);
        
        spell = getSpell(selection);
        
        try{
            SpellControl.castSpell(spell, false);
        }
        catch(illegalActionException ex){
              System.out.println(ex.getMessage());
        }
        
        populatePlayerStats();
        this.adventureMenuFrame.populateCharacterData();
         
    }//GEN-LAST:event_castSpellActionPerformed

    private void populatePlayerStats(){
        Actor[][] actors = game.getActor();
        PlayerCharacter playerStats = ((PlayerCharacter) actors[0][0]);
        
        this.healthPoints.setText("Health Points: "
                                + Integer.toString(playerStats.getCurrentHealthPoints())
                                + " / "
                                + Integer.toString(playerStats.getHealthPoints()));
        
        this.manaPoints.setText("Mana Points: "
                                + Integer.toString(playerStats.getCurrentMagicPoints())
                                + " / "
                                + Integer.toString(playerStats.getMagicPoints()));
    }
    
    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        this.dispose();
    }//GEN-LAST:event_exitMenuActionPerformed

    private void magicTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_magicTableMouseClicked
        
        Spells spell = null;
        
        int row = this.magicTable.getSelectedRow();
        int column = this.magicTable.getSelectedColumn();
        String selection = (String) this.magicTable.getValueAt(row, column);
        
        spell = getSpell(selection);
        
        this.spellName.setText(spell.getSpellName());
        this.spellDescription.setText(spell.getDescription());
        this.spellEffect.setText("Spell Effect: " + spell.getSpecialEffects());
        this.manaCost.setText("Mana Cost: " + spell.getMagicCost());
    }//GEN-LAST:event_magicTableMouseClicked
    
    private Spells getSpell(String selection){
        Spells spell = null;
        try{
            spell = SpellControl.getSpell(selection);
            System.out.println(spell.toString());
            }catch(stringNotFoundException ex){
                System.out.println(ex.getMessage());
        }
        return spell;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MagicMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MagicMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MagicMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MagicMenuFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MagicMenuFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Canvas canvas1;
    private javax.swing.JButton castSpell;
    private javax.swing.JButton exitMenu;
    private javax.swing.JLabel healthPoints;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable magicTable;
    private javax.swing.JLabel manaCost;
    private javax.swing.JLabel manaPoints;
    private javax.swing.JLabel spellDescription;
    private javax.swing.JPanel spellDisplayPanel;
    private javax.swing.JLabel spellEffect;
    private javax.swing.JLabel spellName;
    // End of variables declaration//GEN-END:variables
}
